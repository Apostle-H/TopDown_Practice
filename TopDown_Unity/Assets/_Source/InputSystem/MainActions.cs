//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Source/InputSystem/MainActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputSystem
{
    public partial class @MainActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MainActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainActions"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""e4cb655d-2f74-4cbc-90ca-3e0e7194d781"",
            ""actions"": [
                {
                    ""name"": ""MoveDirection"",
                    ""type"": ""Value"",
                    ""id"": ""c574a328-07e1-432a-b8bb-b1ec9e7591d6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookDirection"",
                    ""type"": ""Value"",
                    ""id"": ""4ffd247e-67f3-4ad7-8129-6e63d5a3208b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""495afe47-7584-4592-8f83-e56f370289b1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7d1700c4-a420-4bcf-adc4-1122bdde6100"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c051084a-4c09-4de9-8250-16d0adc1c34b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d0ee6c31-d85d-4c50-8040-dfea1654f2e8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1cb1fa48-2c8f-48f2-bc26-dd5a2d03b282"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f5facef6-bdd6-488b-b8c0-6e43fd52ea62"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Shoot"",
            ""id"": ""9c57392e-2133-43fd-a286-325d2fd834eb"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""9abb3c07-0bcb-4cfd-bb79-f887338d4a72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hook"",
                    ""type"": ""Button"",
                    ""id"": ""0c7b9714-9714-4ceb-8de9-f2d5670bee2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5a168092-7f85-4992-a269-68225244e8b1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""784ef50f-fc9e-4154-abf4-fea03b967e15"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interactions"",
            ""id"": ""fcc950c0-a529-401c-9b72-665cee220d68"",
            ""actions"": [
                {
                    ""name"": ""ConnectRelease"",
                    ""type"": ""Button"",
                    ""id"": ""430b0d5b-3c02-4d8d-bd3c-d112929d1985"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Split"",
                    ""type"": ""Button"",
                    ""id"": ""37f70ae7-cc81-4bb5-b691-506a313ba7a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f9b900b-9b7d-4fc8-aec9-9719d432a3a2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConnectRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b50ba9ce-b116-4db3-8852-fa06157e00d9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Split"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Consumables"",
            ""id"": ""24ef7430-e142-459c-a260-929cdcddb437"",
            ""actions"": [
                {
                    ""name"": ""PatchUse"",
                    ""type"": ""Button"",
                    ""id"": ""8deac199-2caa-4645-a756-b17338ae31ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PatchCraft"",
                    ""type"": ""Button"",
                    ""id"": ""7ac6afdd-60b2-4c1c-b3b4-522803ba5200"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""965b9c44-a548-4cd7-a00d-e811e9433957"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PatchUse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e88d851d-e079-45d7-8adc-b71d77689956"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PatchCraft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Movement
            m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
            m_Movement_MoveDirection = m_Movement.FindAction("MoveDirection", throwIfNotFound: true);
            m_Movement_LookDirection = m_Movement.FindAction("LookDirection", throwIfNotFound: true);
            // Shoot
            m_Shoot = asset.FindActionMap("Shoot", throwIfNotFound: true);
            m_Shoot_Attack = m_Shoot.FindAction("Attack", throwIfNotFound: true);
            m_Shoot_Hook = m_Shoot.FindAction("Hook", throwIfNotFound: true);
            // Interactions
            m_Interactions = asset.FindActionMap("Interactions", throwIfNotFound: true);
            m_Interactions_ConnectRelease = m_Interactions.FindAction("ConnectRelease", throwIfNotFound: true);
            m_Interactions_Split = m_Interactions.FindAction("Split", throwIfNotFound: true);
            // Consumables
            m_Consumables = asset.FindActionMap("Consumables", throwIfNotFound: true);
            m_Consumables_PatchUse = m_Consumables.FindAction("PatchUse", throwIfNotFound: true);
            m_Consumables_PatchCraft = m_Consumables.FindAction("PatchCraft", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Movement
        private readonly InputActionMap m_Movement;
        private IMovementActions m_MovementActionsCallbackInterface;
        private readonly InputAction m_Movement_MoveDirection;
        private readonly InputAction m_Movement_LookDirection;
        public struct MovementActions
        {
            private @MainActions m_Wrapper;
            public MovementActions(@MainActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveDirection => m_Wrapper.m_Movement_MoveDirection;
            public InputAction @LookDirection => m_Wrapper.m_Movement_LookDirection;
            public InputActionMap Get() { return m_Wrapper.m_Movement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
            public void SetCallbacks(IMovementActions instance)
            {
                if (m_Wrapper.m_MovementActionsCallbackInterface != null)
                {
                    @MoveDirection.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMoveDirection;
                    @MoveDirection.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMoveDirection;
                    @MoveDirection.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMoveDirection;
                    @LookDirection.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnLookDirection;
                    @LookDirection.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnLookDirection;
                    @LookDirection.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnLookDirection;
                }
                m_Wrapper.m_MovementActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MoveDirection.started += instance.OnMoveDirection;
                    @MoveDirection.performed += instance.OnMoveDirection;
                    @MoveDirection.canceled += instance.OnMoveDirection;
                    @LookDirection.started += instance.OnLookDirection;
                    @LookDirection.performed += instance.OnLookDirection;
                    @LookDirection.canceled += instance.OnLookDirection;
                }
            }
        }
        public MovementActions @Movement => new MovementActions(this);

        // Shoot
        private readonly InputActionMap m_Shoot;
        private IShootActions m_ShootActionsCallbackInterface;
        private readonly InputAction m_Shoot_Attack;
        private readonly InputAction m_Shoot_Hook;
        public struct ShootActions
        {
            private @MainActions m_Wrapper;
            public ShootActions(@MainActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Attack => m_Wrapper.m_Shoot_Attack;
            public InputAction @Hook => m_Wrapper.m_Shoot_Hook;
            public InputActionMap Get() { return m_Wrapper.m_Shoot; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ShootActions set) { return set.Get(); }
            public void SetCallbacks(IShootActions instance)
            {
                if (m_Wrapper.m_ShootActionsCallbackInterface != null)
                {
                    @Attack.started -= m_Wrapper.m_ShootActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_ShootActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_ShootActionsCallbackInterface.OnAttack;
                    @Hook.started -= m_Wrapper.m_ShootActionsCallbackInterface.OnHook;
                    @Hook.performed -= m_Wrapper.m_ShootActionsCallbackInterface.OnHook;
                    @Hook.canceled -= m_Wrapper.m_ShootActionsCallbackInterface.OnHook;
                }
                m_Wrapper.m_ShootActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                    @Hook.started += instance.OnHook;
                    @Hook.performed += instance.OnHook;
                    @Hook.canceled += instance.OnHook;
                }
            }
        }
        public ShootActions @Shoot => new ShootActions(this);

        // Interactions
        private readonly InputActionMap m_Interactions;
        private IInteractionsActions m_InteractionsActionsCallbackInterface;
        private readonly InputAction m_Interactions_ConnectRelease;
        private readonly InputAction m_Interactions_Split;
        public struct InteractionsActions
        {
            private @MainActions m_Wrapper;
            public InteractionsActions(@MainActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ConnectRelease => m_Wrapper.m_Interactions_ConnectRelease;
            public InputAction @Split => m_Wrapper.m_Interactions_Split;
            public InputActionMap Get() { return m_Wrapper.m_Interactions; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InteractionsActions set) { return set.Get(); }
            public void SetCallbacks(IInteractionsActions instance)
            {
                if (m_Wrapper.m_InteractionsActionsCallbackInterface != null)
                {
                    @ConnectRelease.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnConnectRelease;
                    @ConnectRelease.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnConnectRelease;
                    @ConnectRelease.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnConnectRelease;
                    @Split.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnSplit;
                    @Split.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnSplit;
                    @Split.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnSplit;
                }
                m_Wrapper.m_InteractionsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ConnectRelease.started += instance.OnConnectRelease;
                    @ConnectRelease.performed += instance.OnConnectRelease;
                    @ConnectRelease.canceled += instance.OnConnectRelease;
                    @Split.started += instance.OnSplit;
                    @Split.performed += instance.OnSplit;
                    @Split.canceled += instance.OnSplit;
                }
            }
        }
        public InteractionsActions @Interactions => new InteractionsActions(this);

        // Consumables
        private readonly InputActionMap m_Consumables;
        private IConsumablesActions m_ConsumablesActionsCallbackInterface;
        private readonly InputAction m_Consumables_PatchUse;
        private readonly InputAction m_Consumables_PatchCraft;
        public struct ConsumablesActions
        {
            private @MainActions m_Wrapper;
            public ConsumablesActions(@MainActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @PatchUse => m_Wrapper.m_Consumables_PatchUse;
            public InputAction @PatchCraft => m_Wrapper.m_Consumables_PatchCraft;
            public InputActionMap Get() { return m_Wrapper.m_Consumables; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ConsumablesActions set) { return set.Get(); }
            public void SetCallbacks(IConsumablesActions instance)
            {
                if (m_Wrapper.m_ConsumablesActionsCallbackInterface != null)
                {
                    @PatchUse.started -= m_Wrapper.m_ConsumablesActionsCallbackInterface.OnPatchUse;
                    @PatchUse.performed -= m_Wrapper.m_ConsumablesActionsCallbackInterface.OnPatchUse;
                    @PatchUse.canceled -= m_Wrapper.m_ConsumablesActionsCallbackInterface.OnPatchUse;
                    @PatchCraft.started -= m_Wrapper.m_ConsumablesActionsCallbackInterface.OnPatchCraft;
                    @PatchCraft.performed -= m_Wrapper.m_ConsumablesActionsCallbackInterface.OnPatchCraft;
                    @PatchCraft.canceled -= m_Wrapper.m_ConsumablesActionsCallbackInterface.OnPatchCraft;
                }
                m_Wrapper.m_ConsumablesActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PatchUse.started += instance.OnPatchUse;
                    @PatchUse.performed += instance.OnPatchUse;
                    @PatchUse.canceled += instance.OnPatchUse;
                    @PatchCraft.started += instance.OnPatchCraft;
                    @PatchCraft.performed += instance.OnPatchCraft;
                    @PatchCraft.canceled += instance.OnPatchCraft;
                }
            }
        }
        public ConsumablesActions @Consumables => new ConsumablesActions(this);
        public interface IMovementActions
        {
            void OnMoveDirection(InputAction.CallbackContext context);
            void OnLookDirection(InputAction.CallbackContext context);
        }
        public interface IShootActions
        {
            void OnAttack(InputAction.CallbackContext context);
            void OnHook(InputAction.CallbackContext context);
        }
        public interface IInteractionsActions
        {
            void OnConnectRelease(InputAction.CallbackContext context);
            void OnSplit(InputAction.CallbackContext context);
        }
        public interface IConsumablesActions
        {
            void OnPatchUse(InputAction.CallbackContext context);
            void OnPatchCraft(InputAction.CallbackContext context);
        }
    }
}
